/* Написать название темы курсового проекта (в комментарии)
Планируется база данных *"Потребительская корзина" * на однну семью.
На данный момент запланированно создать следующие таблицы
human - членны семь и их профили
shop - сети магазинов, карты, скидки по картам
Goods - набор стандартных товаров (хлеб, молоко, сыр, ..., одежда, обувь,...)
purchases - совершенные покупки (товар, дата, цена, скидка)
food preferences - любимые блюда для каждого члена семьи
food - список блюд которые вообще можно приготовить (продукты, колличество на порцию, время приготовления)
nutritional value - пищевая ценность (коллории, микроэлементы, норма потребления)*/

/********************************************    Курсовой проект   ********************************************/

-- 1. Составить общее текстовое описание БД и решаемых ею задач; 

/* База данных "Потребительская корзина" на одну семью. База данных создается для  сбора статистических данных потребительской корзины конкретной семьи.
 * В БД будут перечисленны товары за определенный отрезок времени (в идеале данная бд предполагает сбор данных в режиме реального времени), и расходы 
 * семьи на преобретение данных товаров. В основном в БД будут представленны продукты питания и потребление этих продуктов членами семьи в зависимости
 * от возраста, пола и предпочтений, так же рекомендации по необходимому минимальному набору продуктов.
 * Зачем задумывалась данная БД? Это многолетняя идея по реализации рекомендаций здорового образа жизним, исходя из реалий предоставляемых 
 * продуктов питания на рынке, а также подбор меню на каждый день, без  потерь в качестве питания, формирование списка ежедневных/еженедельных/ежемесячных покупок,
 * упрощение ведения семейного бюджета, без потерь в качестве жизни */
 
/*На данный момент запланированно создать следующие таблицы
human - членны семь и их профили
shop - сети магазинов, карты, скидки по картам
Goods - набор стандартных товаров (хлеб, молоко, сыр, ..., одежда, обувь,...)
purchases - совершенные покупки (товар, дата, цена, скидка)
food preferences - любимые блюда для каждого члена семьи
food - список блюд которые вообще можно приготовить (продукты, колличество на порцию, время приготовления)
nutritional value - пищевая ценность (коллории, микроэлементы, норма потребления)*/

-- 2. минимальное количество таблиц - 10;
-- 3. скрипты создания структуры БД (DDL, с первичными ключами, индексами, внешними ключами);
-- 4. создать ERDiagram для БД; - отдельный фаил.
-- 5. скрипты наполнения БД данными (дамп, не более 20 строк в таблицах);


DROP DATABASE IF EXISTS consumer_basket;
CREATE DATABASE consumer_basket;
USE consumer_basket;




DROP TABLE IF EXISTS users;
CREATE TABLE users (
	-- целые числа 8 бит, не отрицательные, не нулевые значения, автозаполнение,первичный ключ 
	id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'идентификатор', 
	name VARCHAR(50) COMMENT 'Имя',
	gender CHAR(1) COMMENT 'пол:(m,f)',
	berthday DATE NOT NULL COMMENT 'день рожденья',
	status CHAR(1) COMMENT 'статус: g(grand)-бабушки/дедушки, c(children)-дети, p(parents)-родители'
) COMMENT 'члены семьи';

INSERT INTO  users (name, gender, berthday, status) VALUES 
('Ника', 'f', '2019-01-31', 'c'),
('Варя', 'f', '2010-07-21', 'c'),
('Антон', 'm', '1984-03-19', 'p'),
('Саша', 'f', '1983-03-14', 'p'),
('Анна', 'f', '1955-07-24', 'g'),
('Ольга', 'f', '1953-04-09','g'),
('Леонид', 'm', '1951-12-03', 'g');




DROP TABLE IF EXISTS shops;
CREATE TABLE shops (
  shop_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) COMMENT 'Названиеторговой сети'
  -- UNIQUE unique_name(name(10)) не уверена что это мне надо, разобраться
) COMMENT 'магазины'; 
-- таблица нужна в дальнейшем для расчета оптимального среднего чека в зависимости от торговой сети

INSERT INTO shops (name) VALUES 
('магнит'),('магнит косметик'), ('покупочка'), ('Fixprise'), ('аптека Флора'), 
('Bestprise'), ('Спортмастер'), ('Sinsay'), ('лента'), ('метро'), 
('хлебница'), ('офисмаг'), ('Перекресток'), ('маяк'), ('базар'), ('красное&белое');




DROP TABLE IF EXISTS purchases_name;
CREATE TABLE purchases_name (
	-- id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	class VARCHAR(255) PRIMARY KEY
  ) COMMENT 'наименование класса товара'; 
 
 
INSERT INTO purchases_name (class) VALUES 
('газировка'),
('дневник'),
('изюм'),
('колбаса'),
('консервы'),
('косметика'),
('кофе'),
('краска'),
('майонез'),
('макароны'),
('манка'),
('масло'),
('молоко'),
('моющие'),
('мясо'),
('огурцы'),
('одежда'),
('печенье'),
('пишушие принадлежности'),
('посуда'),
('рыба'),
('Сахар'),
('сладкое'),
('сливки'),
('сметана'),
('специи'),
('сухие завтраки'),
('сыр'),
('сырок'),
('тетрадь'),
('хлеб'),
('хлебобулочные'),
('цукаты'),
('Чай'),
('Мука'),
('яйцо');




DROP TABLE IF EXISTS purchases;
CREATE TABLE purchases (
	id SERIAL PRIMARY KEY, -- SERIAL - это псевдоним для BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE
	class_name VARCHAR(255), -- VARCHAR(255), -- наименование продукта к примеру "молоко"
	FOREIGN KEY (class_name) REFERENCES purchases_name (class),
	name VARCHAR (250) COMMENT 'подробное наименование', -- "молоко 3% фирмы сметанкино"
	price DECIMAL (10,2) COMMENT 'Цена',
	weight DECIMAL (10,2) COMMENT 'вес в граммах, объем в миллилитрах',
	unit ENUM ('гр','мл','шт') COMMENT 'единица измерения', -- может лучше сделать один столбец вместо 2
	amount FLOAT UNSIGNED COMMENT 'количество',
	created_at DATE NOT NULL DEFAULT (CURRENT_DATE) COMMENT 'дата покупки',
	availability BIT DEFAULT TRUE NULL COMMENT 'наличие продуктов',
	name_shop BIGINT UNSIGNED NOT NULL,
	FOREIGN KEY (name_shop) REFERENCES shops(shop_id)
) COMMENT 'покупки';


INSERT INTO purchases (class_name, name, price, weight, unit, amount, created_at, name_shop) VALUES 
('дневник',	'Дневник пифагор белый',	29.00,	1,	'шт',	2,	'2022-09-23',	12),
('краска',	'краска для моделей 12мл зеленый',	99.00,	1,	'шт',	1,	'2022-09-23',	12),
('пишушие принадлежности',	'ручка шариковая автомат 4 цвета',	49.00,	1,	'шт',	2,	'2022-09-23',	12),
('пишушие принадлежности',	'текстовыделитель желтый',	23.75,	1,	'шт',	1,	'2022-09-23', 12),				
('колбаса',	'колбаса сервилат с/к',	327.59,	504,	'гр',	1,	'2022-09-17',	13),
('специи',	'смесь для глинтвейна',	85.98,	1,	'шт',	2,	'2022-09-17',	14),
('сладкое',	'Пироженное макаронс',	42.99,	20,	'гр',	4,	'2022-09-17',	15),
('посуда',	'посуда', 	237.00,	1,	'шт',	1,	'2022-09-26',	6),							
('кофе',	'кофе зерновой серенада',	89.99,	100,	'гр',	1,	'2022-09-29',	3),
('Сахар',	'Сахар песок',	102.03,	1570,	'гр',	1,	'2022-09-29',	3),
('кофе',	'кофе жаманджи зерно',	860.99,	1000,	'гр',	1,	'2022-09-29',	3),
('печенье',	'Восточная сладость орешек',	102.67,	394,	'гр',	2,	'2022-09-29',	3),
('масло',	'масло горчичное горлинка',	99.99,	500,	'мл',	1,	'2022-09-29',	3),		
('хлебобулочные','Плюшка Московская',	24.50,	150,	'гр',	2,	'2022-09-28',	11),				
('одежда', 'Футболка красная мал',	149.00,	1,	'шт',	1,	'2022-09-30',	7),
('одежда','Футболка синяя мал',	149.01,	2,	'шт',	2,	'2022-09-30',	7),					
('одежда',	'Жилет школа чб',	1399.00,	1,	'шт',	1,	'2022-09-30',	8),
('одежда',	'брюки школа',	699.00,	1,	'шт',	1,	'2022-09-30',	8),
('одежда',	'бриджи для фитнеса черн',	499.00,	1,	'шт',	1,	'2022-08-08',	7),
('газировка',	'Минеральная вода',	33.99,	1,	'шт',	1,	'2022-09-09',	3),
('моющие',	'Белизна-гель',	87.99,	1,	'шт',	1,	'2022-09-09',	3),			
('молоко',	'Молоко у_паст Сметанин 3,2%',	59.99,	876,	'мл',	2,	'2022-09-13',	1),
('сырок',	'Сырок твороженный с изюмом 8%',	34.99,	90,	'гр',	5,	'2022-09-13',	1),
('хлеб',	'Хлеб пеклеванный новый',	19.99,	550,	'гр',	1,	'2022-09-13',	1),
('сыр','Сыр Российский 45% Моя цена',	160.08,	348,	'гр',	1,	'2022-09-13',	1),
('майонез',	'майонез Провансаль 50.5%',	159.99,	770,	'гр',	1,	'2022-09-13',	1),
('газировка',	'кола с кофе',	44.99,	500,	'мл',	2,	'2022-09-13',	1),
('газировка',	'квас Староминский пл б',	44.99,	500,	'мл',	1,	'2022-09-13',	1),
('яйцо','яйцо столовое С0',59.99,20,'шт',1,'2022-09-11',1),
('хлеб','Хлеб пеклеванный новый',19.99,550,'гр',1,'2022-09-11',1),
('молоко','Молоко у.паст Сметанин 3,2%',59.99,876,'мл',2,'2022-09-11',1),
('посуда','терка нержав сталь мин 9 см',104.99,1,'шт',1,'2022-09-11',1),
('хлеб','Хлеб пеклеванный новый',19.99,550,'гр',1,'2022-09-08',1),
('молоко','Молоко у.паст Сметанин 3,2%',59.99,876,'мл',2,'2022-09-08',1),
('сметана','сметана любимый город 20%',65.99,300,'гр',1,'2022-09-08',1),
('хлеб','Хлеб пеклеванный новый',19.99,550,'гр',1,'2022-09-25',1);


/*таблица созданная для проверки работоспособности процедуры*/

 /*
 *INSERT INTO purchases (class_name, name, price, weight, unit, amount, created_at, name_shop) VALUES 
('печенье', 'изделие хлебобулочное Сахарок', 258.90,	1000,	'гр',	1,	'2022-07-17',	14),
('сухие завтраки',	'сухие завтраки колечки', 65.90, 1,	'шт', 1, '2022-07-17', 14),
('изюм',	'изюм светлый',	156.90,	500,	'гр',	1,	'2022-07-17',	14),
('цукаты',	'цукаты ананас',	149.90,	300,	'гр',	1,	'2022-07-17',	14),
('печенье',	'крендель с морской солью',	72.90,	500,	'гр',	1,	'2022-07-17',	14),
('Чай',	'чай зеленый',	107.90,	200,	'гр',	1,	'2022-07-17',	14),
('рыба',	'Шпроты добровлот',	207.80,	200,	'гр',	2,	'2022-07-17',	14),
('консервы',	'зеленый горошек кубанский разгуляй',	50.90,	400,	'гр',	1,	'2022-07-17',	14),	
('тетрадь',	'сменный блок к тетеради 80 л. Белый',	134.90,	1,	'шт',	1,	'2022-07-23',	12),
('краска',	'Краска по ткани остров сокровищ 12 цв.',	266.95,	1,	'шт',	1,	'2022-07-23',	12),
('дневник',	'Дневник пифагор белый',	29.00,	1,	'шт',	2,	'2022-07-23',	12),
('краска',	'краска для моделей 12мл зеленый',	99.00,	1,	'шт',	1,	'2022-07-23',	12),
('пишушие принадлежности',	'ручка шариковая автомат 4 цвета',	49.00,	1,	'шт',	2,	'2022-07-23',	12),
('пишушие принадлежности',	'текстовыделитель желтый',	23.75,	1,	'шт',	1,	'2022-07-23', 12),				
('колбаса',	'колбаса сервилат с/к',	327.59,	504,	'гр',	1,	'2022-07-17',	13),
('специи',	'смесь для глинтвейна',	85.98,	1,	'шт',	2,	'2022-07-17',	14),
('сладкое',	'Пироженное макаронс',	42.99,	20,	'гр',	4,	'2022-07-17',	15),
('посуда',	'посуда', 	237.00,	1,	'шт',	1,	'2022-07-26',	6),							
('кофе',	'кофе зерновой серенада',	89.99,	100,	'гр',	1,	'2022-07-29',	3),
('Сахар',	'Сахар песок',	102.03,	1570,	'гр',	1,	'2022-07-29',	3),
('кофе',	'кофе жаманджи зерно',	860.99,	1000,	'гр',	1,	'2022-07-29',	3),
('печенье',	'Восточная сладость орешек',	102.67,	394,	'гр',	2,	'2022-07-29',	3);
*/




/*все товары купленные за две недели до актуальной даты, можно считать съеденными или испортившимися*/

-- проверим наличие подобных продуктов
SELECT availability AS 'проверка годности', created_at  FROM purchases
WHERE ((CURRENT_DATE) - (created_at)) > 14;

-- изменим их состояние в таблице 
UPDATE purchases
SET
	availability = false
WHERE ((CURRENT_DATE) - (created_at)) > 14;

-- проверим результат
SELECT availability AS 'испортились', created_at  FROM purchases
WHERE ((CURRENT_DATE) - (created_at)) > 14;




DROP TABLE IF EXISTS health;
CREATE TABLE health (
	id SERIAL PRIMARY KEY, 
	name VARCHAR (250) COMMENT 'название услуги',
	price DECIMAL (10,2) COMMENT 'Цена',
	created_at DATE NOT NULL DEFAULT (CURRENT_DATE) COMMENT 'дата оплаты',
	name_shop BIGINT UNSIGNED NOT NULL, -- медучреждения и аптеки
	FOREIGN KEY (name_shop) REFERENCES shops(shop_id)
) COMMENT 'здоровье';


INSERT INTO health (name, price, created_at, name_shop) VALUES 
('тауфон', 135, '2022-08-15', 5),
('дезринит', 605, '2022-08-10', 5),
('зодак', 315, '2022-08-10', 5),
('ценаризин', 450, '2022-07-25', 5),
('финицитол', 565, '2022-07-30', 5),
('парацетамол', 66, '2022-08-01', 5),
('уголь актированный', 15, '2022-07-01', 5),
('тауфон', 135, '2022-08-15', 5),
('дезринит', 605, '2022-08-10', 5),
('изофра', 487, '2022-07-03', 5),
('Магний В6', 349, '2022-07-04', 5),
('череда', 80, '2022-07-21', 5),
('актовегин', 1476, '2022-08-01', 5),
('уголь актированный', 15, '2022-07-01', 5);




DROP TABLE IF EXISTS communal_name;
CREATE TABLE communal_name (
  communal_id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) COMMENT 'статья затрат'
) COMMENT 'коммунальные платежи и другие траты'; 

INSERT INTO communal_name (name) VALUES 
('ГВС'),('ХВС+ОТК'),('домофон'),('Тел'),('интернет');




DROP TABLE IF EXISTS communal;
CREATE TABLE communal (
	id SERIAL PRIMARY KEY, 
	communal_name BIGINT UNSIGNED NOT NULL,
	FOREIGN KEY (communal_name) REFERENCES communal_name(communal_id),
	price DECIMAL (10,2) COMMENT 'Цена',
	created_at DATE NOT NULL DEFAULT (CURRENT_DATE) COMMENT 'дата оплаты',
	availability BIT DEFAULT TRUE NULL COMMENT 'актуализация платежа'
);

INSERT INTO communal (communal_name, price, created_at) VALUES 
(1, 1567, '2022-08-10' ), (2, 1460, '2022-08-10'), (3, 327, '2022-08-10'), (4, 1200, '2022-08-10'), (5, 700, '2022-08-10'),
(1, 1567, '2022-09-10' ), (2, 1460, '2022-09-10'), (3, 327, '2022-09-10'), (4, 1200, '2022-09-10'), (5, 700, '2022-09-10');


/*обновление данных по коммунальным платежам*/

-- все платежи давностью месяц назад
SELECT availability AS 'в прошлом месяце', created_at  FROM communal
WHERE (MONTH(CURRENT_DATE) - MONTH(created_at)) >= 1;

-- изменим их состояние в таблице 
UPDATE communal
SET
	availability = false
WHERE (MONTH(CURRENT_DATE) - MONTH(created_at)) >= 1;

-- проверим результат
SELECT availability AS 'оплачено в прошлом месяце', created_at  FROM communal
WHERE (MONTH(CURRENT_DATE) - MONTH(created_at)) >= 1;




DROP TABLE IF EXISTS other;
CREATE TABLE other (
	id SERIAL PRIMARY KEY, 
	name VARCHAR (250) COMMENT 'название услуги',
	price DECIMAL (10,2) COMMENT 'Цена',
	created_at DATE NOT NULL DEFAULT (CURRENT_DATE) COMMENT 'дата оплаты',
	period_at DATE COMMENT 'срок до которого оплачено',
	description TEXT COMMENT 'Описание' -- поискать как сделать поле с преустановленной записью если не дано иного
) COMMENT 'другие траты';


INSERT INTO other (name, price, created_at, period_at, description) VALUES
('гимнастика', 1717, '2022-07-10', '2022-08-10', 'no comments'), ('садик', 3250, '2022-07-10', '2022-08-10', 'no comments'), ('школа', 500, '2022-08-10', '2023-01-10', 'no comments'), 
('музыка', 550, '2022-07-10', '2022-08-10', 'no comments'), ('налоги', 1000, '2022-07-10', '2023-07-10', 'no comments'), ('ГСМ', 5000, '2022-07-10', '2022-08-10', 'no comments'),
('гимнастика', 1717, '2022-08-10', '2022-09-10', 'no comments' ), ('садик', 3250, '2022-08-10', '2022-09-10', 'no comments'),  
('музыка', 550, '2022-08-10', '2022-09-10', 'no comments'), ('ГСМ', 5000, '2022-08-10', '2022-09-10', 'no comments');




DROP TABLE IF EXISTS nutritional;
CREATE TABLE nutritional (
	id SERIAL PRIMARY KEY, 
	class_name VARCHAR(255) COMMENT 'продукт питания', 
	FOREIGN KEY (class_name) REFERENCES purchases_name (class),
	calories FLOAT UNSIGNED COMMENT 'калории',
	fat FLOAT UNSIGNED COMMENT 'жир',
	protein FLOAT UNSIGNED COMMENT 'белок',
	carbohydrates FLOAT UNSIGNED COMMENT 'углеводы',
	trace_elements SET ('pass') COMMENT 'надо расписывать', -- заглушка
	vitamins SET ('pass') COMMENT 'пока заглушка' -- заглушка
) COMMENT 'пищевая ценность в у.е. продукта';
-- в дальнейшем надо рассписать все содержащиеся микроэлементы и витамины, для создания таблицы по нормам потребления


INSERT INTO nutritional (class_name, calories, fat, protein, carbohydrates, trace_elements, vitamins) VALUES
('газировка', 41.0, 0.01, 0.02, 10.56, 0, 0),
('изюм', 299.0, 0.49, 2.99, 79.06, 0, 0),
('колбаса', 244.0, 19.32, 16.0, 0.37, 0, 0),
('консервы', 363.0, 32.4, 17.4, 0.0, 0, 0),
('кофе', 1.0, 0.01, 0.17, 0.08, 0, 0),
('майонез', 620.0, 67, 5.0, 2.2, 0, 0),
('макароны', 367.0, 1.04, 13.14, 74.88, 0, 0),
('манка', 333.0, 1.29, 11.48, 69.0, 0, 0),
('масло', 757.0, 83.0, 0.5, 0.75, 0, 0),
('молоко', 50.0, 1.87, 3.32, 5.04, 0, 0),
('мясо', 200.0, 9.21, 28.69, 0.06, 0, 0),
('огурцы', 15.0, 0.11, 0.65, 3.63, 0, 0),
('печенье', 310.0, 11.57, 6.79, 44.87, 0 , 0),
('рыба', 148.0, 6.6, 20.8, 0.0, 0, 0),
('Сахар', 399.0, 0.0, 0.0, 99.8, 0, 0),
('сладкое', 577.0, 39.0, 5.0, 51.0, 0, 0),
('сливки', 119.0, 10.0, 2.7, 4.5, 0, 0),
('сметана', 119.0, 10.0, 2.7, 3.9, 0, 0),
('специи', 108.0, 1.1, 2.3, 20.0, 0, 0),
('сухие завтраки', 377.0, 1.4, 6.1, 85.4, 0, 0),
('сыр', 361.0, 28.42, 22.84, 3.48, 0, 0),
('сырок', 287.0, 11.0, 15.0, 32.0, 0, 0),
('хлеб', 209.0, 1.0, 4.7, 43.9, 0, 0),
('хлебобулочные', 270.0, 1.0, 9.0, 55.0, 0, 0),
('цукаты', 322.0, 0.1, 0.3, 81.1, 0, 0 ),
('Чай', 30.0, 0.0, 0.0, 6.9, 0, 0),
('Мука', 368.0, 1.1, 7.8, 79.7, 0, 0),
('яйцо', 143.0, 9.51, 12.56, 0.72, 0, 0);




DROP TABLE IF EXISTS favorite_foods;
CREATE TABLE favorite_foods (
	user_id SMALLINT UNSIGNED,
	food VARCHAR(250) PRIMARY KEY COMMENT 'блюдо',
	fk_user_id TINYINT UNSIGNED NOT NULL,
	FOREIGN KEY (fk_user_id) REFERENCES users(id)
)COMMENT 'любимая еда'; 


INSERT INTO favorite_foods (food , fk_user_id) VALUES
('каша манная', 1),
('омлет', 1),
('блины со сметаной', 2),
('бутерброд с колбасой', 3),
('кофе', 4),
('бутерброд с сыром', 5),
('рыба тушеная', 6),
('чай',6),
('макароны', 7),
('яйичница', 7);




DROP TABLE IF EXISTS foods;
CREATE TABLE foods (
	id SERIAL PRIMARY KEY,
	food VARCHAR (250) COMMENT 'блюдо',
	FOREIGN KEY (food) REFERENCES favorite_foods (food),
	compound VARCHAR (250) COMMENT 'ингредиент',
	FOREIGN KEY (compound) REFERENCES purchases_name (class),
	quantity FLOAT UNSIGNED COMMENT 'количество продукта на одну порцию в у.е.'
) COMMENT 'ингредиенты для блюда';


INSERT INTO foods (food , compound ) VALUES
('каша манная', 'манка'),
('каша манная', 'масло'),
('каша манная', 'молоко'),
('каша манная', 'Сахар'),
('омлет', 'яйцо'),
('омлет', 'молоко'),
('омлет', 'масло'),
('блины со сметаной', 'яйцо'),
('блины со сметаной', 'молоко'),
('блины со сметаной', 'масло'),
('блины со сметаной', 'Сахар'),
('блины со сметаной', 'Мука'),
('бутерброд с колбасой', 'хлеб'),
('бутерброд с колбасой', 'колбаса'),
('кофе', 'кофе'),
('бутерброд с сыром', 'хлеб'),
('бутерброд с сыром', 'масло'),
('бутерброд с сыром', 'сыр'),
('рыба тушеная', 'рыба'),
('чай','Чай'),
('макароны','макароны'),
('яйичница', 'яйцо');

	
-- 6. скрипты характерных выборок (SELECT, включающие группировки, JOIN'ы, вложенные запросы);

/* отсортированные траты в текущем месяце*/
SELECT price, created_at FROM purchases WHERE ((MONTH(CURRENT_DATE) - MONTH(created_at)) <= 1)
UNION ALL 
SELECT price, created_at FROM health WHERE ((MONTH(CURRENT_DATE) - MONTH(created_at)) <=1)
UNION ALL 
SELECT price, created_at FROM communal WHERE ((MONTH(CURRENT_DATE) - MONTH(created_at)) <= 1)
UNION ALL 
SELECT price, created_at FROM other WHERE ((MONTH(CURRENT_DATE) - MONTH(created_at)) <= 1)
ORDER BY created_at, price;


/*цена продуктов питания выше средней*/
SELECT 
	p.price, p.class_name, p.name
FROM
	nutritional AS n
LEFT JOIN 
	purchases AS p
ON  n.class_name = p.class_name
WHERE 
	price > (SELECT AVG(price) FROM purchases)
ORDER BY p.price; 


/* наиболее часто покупаемые товары*/
SELECT 
	class_name AS 'товар', name, price
FROM
	purchases
GROUP BY class_name
ORDER BY count(*) DESC
LIMIT 3;




-- 7. представления (минимум 2);
/* первое представление:
 * продукты которые не испортились, отобраны по двум критериям 
 * availability - ранее посчитана в таблице
 * и дата покупки не позднее 7 дней*/

-- 1
DROP VIEW  IF EXISTS fridge;
CREATE VIEW fridge (name, weight, price, availability) 
AS SELECT  p.name, p.weight, p.price, p.availability
FROM purchases AS p
RIGHT JOIN 
	nutritional AS n
ON  n.class_name = p.class_name
WHERE availability IS TRUE;

SELECT * FROM fridge
ORDER BY name;

-- 2
DROP VIEW  IF EXISTS fridge_food;
CREATE VIEW fridge_food (name, weight, class_name) 
AS SELECT  p.name, p.weight, p.class_name
FROM
	purchases AS p
RIGHT JOIN 
	nutritional AS n
ON  n.class_name = p.class_name
WHERE ((CURRENT_DATE) - (created_at)) < 7
ORDER BY created_at;

SELECT * FROM fridge_food
ORDER BY name;

/*второе представление*
 * посмотрим для каких любимых блюд прдукты на 
 * данный момент отсутствуют */

DROP VIEW  IF EXISTS cook_food;
CREATE VIEW cook_food(food, compound)
AS SELECT foods.food, fridge.class_name
FROM 
	foods
LEFT  JOIN 
	fridge_food AS fridge
ON foods.compound = fridge.class_name
WHERE compound IS NOT NULL;

SELECT * FROM cook_food
WHERE compound IS NULL
ORDER BY food;




-- 8. Хранимая процедура / функция / триггер (на выбор, 1 шт.);

DROP PROCEDURE IF EXISTS cook;
DELIMITER //
CREATE PROCEDURE cook()
BEGIN
	IF (SELECT p.availability 
	FROM purchases AS p
	RIGHT JOIN 
		nutritional AS n
	ON  n.class_name = p.class_name
	WHERE availability = 1
	LIMIT 1) THEN
	SELECT DISTINCT class_name AS 'в холодильнике'  FROM nutritional;
	ELSE
		SELECT 'В холодильнике пусто';
	END IF;	
END //
DELIMITER ;

CALL cook();

